// @desc - 単位付きの値の単位を削除します。
// @type {Function}
// @prop {Number} - pxやemなどの単位付きの値を渡します。
// @return {Number} - 引数から単位を削除した数値を返します。
// @example - strip-unit(14px) => 14
@function my-strip-unit($n) {
    @return $n / ($n * 0 + 1);
}

// @desc - プロジェクト共通のマージンを返します。
// @type {Function}
// @prop {String} $key(base) - 引数を指定しない場合はベースになる値を指定します。
// @return {String} - マップで定義しているmarginを返します。
// @require {Map} $my-margins - プロジェクト共通のマージンをバリエーションごとに定義しています。
// @example - my-margins(small) => 0.75rem
@function my-margins($key: base) {
    @return map-get($my-margins, $key);
}

// @desc - プロジェクト共通のパディングを返します。
// @type {Function}
// @prop {String} $key(base) - 引数を指定しない場合はベースになる値を指定します。
// @return {String} - マップで定義しているpaddingを返します。
// @require {Map} $my-paddings - プロジェクト共通のマージンをバリエーションごとに定義しています。
// @example - my-paddings(small) => 0.5em
@function my-paddings($key: base) {
    @return map-get($my-paddings, $key);
}

// @desc - プロジェクト共通のカラーを返します。
// @type {Funciton}
// @prop {String} $key - カラーのキーワード
// @prop {String} $tone(base) - カラーのサブキーワード
// @return {String} - マップで定義しているhex値などを返します。
// @require {Map} $colors - プロジェクトを通して使用される色を管理するためのマップです。
// @example - my-colors(black, light) => #888
@function colors($key, $tone: base) {
    @return map-get( map-get($colors, $key), $tone);
}

// @desc - キーワードからz-indexの数値を取得します。
// @type {Funciton}
// @param {String} $layer - z-indexのキーワード
// @return {Number}
// @require {Map} $my-z-indexes - z-indexを管理するためのmapです。
// @example - my-z(modal) => 3
@function my-z-indexs($layer) {
  @return map-get($my-z-indexes, $layer);
}